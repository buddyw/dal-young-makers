!/bin/bash
#Bash script to program RCX's
#Buddy Whittenburg 2015-09-29

#enable job control
set -m 

FIRMWARE_URL="http://pbrick.info/wp-content/uploads/2013/10/fast0612.zip"
FIRMWARE_FILE="fast0612.lgo"



#FUNCTIONS:

#Displays help dialog and exits
function display_help {
	echo Usage [OPTION]... [PATH]
	echo Program RCX units with firmware and programs for class.
	echo [PATH] must be specified as the full path to the class folder
	echo
	echo Arguments:
	echo   -d, --device NAME	Specify IR interface for programming.
	echo				Device is optional. We use all devices 
	echo 				by default
	echo   -s, --skip-firmware	Skip firmware
	echo   -h, --help		Display this help message
	exit
}

#Downloads and extracts firmware
function download_firmware {
	echo "Downloading firmware to firmware.zip..."
	wget -O ""${CLASS_TMP}/firmware.zip"" "${FIRMWARE_URL}"

	echo "Unziping firmware.zip..."
	unzip -n "${CLASS_TMP}/firmware.zip" -d "${CLASS_TMP}"
}

#Writes a single program to RCX
#Params:
#	$1 = IR Tower Device
#	$2 = RCX Program Number [1-5]
#	$3 = NQC Program Path
function write_nqc_program {
	if [ -e "$3" ]; then
		
		echo Found $3 
		echo Switching RCX to PRG ${2}...
		rawcmd=$(expr 9899 + $2)
		#Raw command to switch to Program #
		nqc -Susb:$1 -raw $rawcmd

		#Write nqc to Program #
		echo Flashing ${3}...
		nqc -Susb:$1 -d "$3"
	else
		echo Could not find ${3}.
	fi
}

#flashes RCX Brick
#Params:
#	$1 = IR Tower Device
function do_flash {
	tower_device=$1
	#Program firmware unless bypassed
	echo Starting flash job on $tower_device
	if [ -z $SKIP_FIRMWARE ]; then
		if [ -e "${CLASS_TMP}/${FIRMWARE_FILE}" ]; then
			nqc -Susb:$tower_device -firmware "${CLASS_TMP}/${FIRMWARE_FILE}"
		else
			echo ERROR: Could not find ${CLASS_TMP}/${FIRMWARE_FILE}!
		fi
	else
		echo "Skipping Firmware Flash..."
	fi

	#Attempt to load each [1-5].nqc file in the class folder
	write_nqc_program $tower_device 5 "${CLASS_PATH%%/}/5.nqc"
	write_nqc_program $tower_device 4 "${CLASS_PATH%%/}/4.nqc"
	write_nqc_program $tower_device 3 "${CLASS_PATH%%/}/3.nqc"
	write_nqc_program $tower_device 2 "${CLASS_PATH%%/}/2.nqc"
	write_nqc_program $tower_device 1 "${CLASS_PATH%%/}/1.nqc"
}


function main {
	#Make sure that the class directory exists
	if [ -d "$CLASS_PATH" ]; then
		echo "Found class $CLASS_PATH"
		mkdir -p $CLASS_TMP

		if [ -z $SKIP_FIRMWARE ]; then
			if [ ! -e "${CLASS_TMP}/${FIRMWARE_FILE}" ]; then
				download_firmware
				if [ ! -e "${CLASS_TMP}/${FIRMWARE_FILE}" ]; then
					echo ERROR: Firmware download Failed!  Exiting...
					exit
				fi
			fi
		fi

		if [ $DEVICE ]; then
			#Device specified, just do it
			echo Starting flash job on: $DEVICE
			
			#Disabled logging since it's not very useful with
			#only 1 IR device supported at a time.
			#job_log="${CLASS_TMP}/$(basename ${DEVICE}).log"
			#do_flash $DEVICE >> $job_log 2>&1

			do_flash $DEVICE 

			echo flash job complete...
		else
			#No Device was specified, so let's make a list of devices.
			#After further testing, we found that, while multiple
			#Devices are listed as legousbtower[0-N], but each device
			#merely references the first USB tower plugged in.
			#This is unfortunate and means that we can't program
			#multiple devices at once.
			#
			#I've added 'head -n 1' to the command so that we will
			#only ever read the first device.  If the drivers are
			#fixed in the future, this be can removed and multiple
			#devices should (theoretically) be supported.
			device_list=`ls /dev/usb/legousbtower* | head -n 1`
			
			#let's see what we got...
			if [ -z $device_list ]; then
				echo No IR towers found!  Exiting...
				exit
			else
				#iterate the list and start a job for each tower
				for towerdev in $device_list; do
					echo Starting flash job on: $towerdev

					#Disabled logging since it's not very useful with
					#only 1 IR device supported at a time.
					#job_log="${CLASS_TMP}/$(basename ${towerdev}).log"
					#do_flash $towerdev >> $job_log 2>&1 &

					do_flash $towerdev &
				done
				sleep 3
				echo -n Waiting for flash jobs to complete...

				# Wait for jobs to complete
				while [ 1 ]; do
					fg 2> /dev/null
					if [ $? == 1 ]; then
						break
					fi
					sleep 2
					echo -n .
				done
				echo
				echo
				echo All flash jobs complete...
			fi
		fi
	fi
	echo Exiting...
}

#Process command line params
while [[ $# > 1 ]]
do
key="$1"

case $key in
	-d|--device)
	DEVICE="$2"
	shift
	;;
	-s|--skip-firmware)
	SKIP_FIRMWARE=YES
	;;
	*)
	#invalid parameter
	display_help
	;;
esac
shift
done

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	display_help
fi

CLASS_PATH="${1}"
CLASS_TMP=${1%%/}/tmp

	
echo
#echo CLASS_PATH = "${CLASS_PATH}"
#echo DEVICE_NAME = "${DEVICE}"
#echo SKIP_FIRMWARE = "${SKIP_FIRMWARE}"
#echo FIRMWARE_URL = "${FIRMWARE_URL}"
#call main function

main
